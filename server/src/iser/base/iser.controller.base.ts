/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { IserService } from "../iser.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { IserCreateInput } from "./IserCreateInput";
import { IserWhereInput } from "./IserWhereInput";
import { IserWhereUniqueInput } from "./IserWhereUniqueInput";
import { IserFindManyArgs } from "./IserFindManyArgs";
import { IserUpdateInput } from "./IserUpdateInput";
import { Iser } from "./Iser";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class IserControllerBase {
  constructor(
    protected readonly service: IserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Iser })
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: IserCreateInput): Promise<Iser> {
    return await this.service.create({
      data: data,
      select: {
        balance: true,
        bank: true,
        bio: true,
        charges: true,
        city: true,
        country: true,
        created_At: true,
        email: true,
        iBan: true,
        id: true,
        image: true,
        name: true,
        password: true,
        phone: true,
        status: true,
        updated_at: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Iser] })
  @ApiNestedQuery(IserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Iser[]> {
    const args = plainToClass(IserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        balance: true,
        bank: true,
        bio: true,
        charges: true,
        city: true,
        country: true,
        created_At: true,
        email: true,
        iBan: true,
        id: true,
        image: true,
        name: true,
        password: true,
        phone: true,
        status: true,
        updated_at: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Iser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: IserWhereUniqueInput
  ): Promise<Iser | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        balance: true,
        bank: true,
        bio: true,
        charges: true,
        city: true,
        country: true,
        created_At: true,
        email: true,
        iBan: true,
        id: true,
        image: true,
        name: true,
        password: true,
        phone: true,
        status: true,
        updated_at: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Iser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: IserWhereUniqueInput,
    @common.Body() data: IserUpdateInput
  ): Promise<Iser | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          balance: true,
          bank: true,
          bio: true,
          charges: true,
          city: true,
          country: true,
          created_At: true,
          email: true,
          iBan: true,
          id: true,
          image: true,
          name: true,
          password: true,
          phone: true,
          status: true,
          updated_at: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Iser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: IserWhereUniqueInput
  ): Promise<Iser | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          balance: true,
          bank: true,
          bio: true,
          charges: true,
          city: true,
          country: true,
          created_At: true,
          email: true,
          iBan: true,
          id: true,
          image: true,
          name: true,
          password: true,
          phone: true,
          status: true,
          updated_at: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
