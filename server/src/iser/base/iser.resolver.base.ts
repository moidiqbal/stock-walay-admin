/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIserArgs } from "./CreateIserArgs";
import { UpdateIserArgs } from "./UpdateIserArgs";
import { DeleteIserArgs } from "./DeleteIserArgs";
import { IserCountArgs } from "./IserCountArgs";
import { IserFindManyArgs } from "./IserFindManyArgs";
import { IserFindUniqueArgs } from "./IserFindUniqueArgs";
import { Iser } from "./Iser";
import { IserService } from "../iser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Iser)
export class IserResolverBase {
  constructor(
    protected readonly service: IserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "read",
    possession: "any",
  })
  async _isersMeta(
    @graphql.Args() args: IserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Iser])
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "read",
    possession: "any",
  })
  async isers(@graphql.Args() args: IserFindManyArgs): Promise<Iser[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Iser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "read",
    possession: "own",
  })
  async iser(@graphql.Args() args: IserFindUniqueArgs): Promise<Iser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Iser)
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "create",
    possession: "any",
  })
  async createIser(@graphql.Args() args: CreateIserArgs): Promise<Iser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Iser)
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "update",
    possession: "any",
  })
  async updateIser(@graphql.Args() args: UpdateIserArgs): Promise<Iser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Iser)
  @nestAccessControl.UseRoles({
    resource: "Iser",
    action: "delete",
    possession: "any",
  })
  async deleteIser(@graphql.Args() args: DeleteIserArgs): Promise<Iser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
